{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport colors from \"../constants/colors\";\nimport AddButton from \"../components/AddButton\";\nimport { Calendar, CalendarList, Agenda } from \"react-native-calendars\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar IndexCal = function IndexCal(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedDay = _useState2[0],\n      setSelectedDay = _useState2[1];\n\n  var mark = _defineProperty({}, selectedDay, {\n    selected: true,\n    selectedColor: colors.accBlue\n  });\n\n  function setDay(day) {\n    console.log(\"function: \" + day);\n    setSelectedDay(day);\n  }\n\n  return _jsxs(View, {\n    style: styles.imageBox,\n    children: [_jsx(Calendar, {\n      current: \"2012-03-01\",\n      onDayPress: function onDayPress(day) {\n        console.log(\"selected day\", day);\n      },\n      onDayLongPress: function onDayLongPress(day) {\n        console.log(\"selected day\", day);\n      },\n      monthFormat: \"yyyy MM\",\n      onMonthChange: function onMonthChange(month) {\n        console.log(\"month changed\", month);\n      },\n      hideExtraDays: true,\n      firstDay: 1,\n      showWeekNumbers: true,\n      onPressArrowLeft: function onPressArrowLeft(subtractMonth) {\n        return subtractMonth();\n      },\n      onPressArrowRight: function onPressArrowRight(addMonth) {\n        return addMonth();\n      },\n      disableAllTouchEventsForDisabledDays: true,\n      enableSwipeMonths: true\n    }), _jsx(View, {\n      style: styles.addButton,\n      children: _jsx(AddButton, {\n        icon: \"plus\"\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  imageBox: {\n    height: \"100%\"\n  },\n  calBox: {\n    height: 600,\n    paddingTop: 75\n  },\n  addButton: {\n    alignItems: \"flex-end\",\n    margin: 20\n  }\n});\nexport default IndexCal;","map":{"version":3,"sources":["/Users/josieincase/Documents/ProjektB/PeriodTracker/screens/IndexCal.js"],"names":["React","useState","colors","AddButton","Calendar","CalendarList","Agenda","IndexCal","props","selectedDay","setSelectedDay","mark","selected","selectedColor","accBlue","setDay","day","console","log","styles","imageBox","month","subtractMonth","addMonth","addButton","StyleSheet","create","height","calBox","paddingTop","alignItems","margin"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;AAEA,OAAOC,MAAP;AACA,OAAOC,SAAP;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,MAAjC,QAA+C,wBAA/C;;;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAC1B,kBAAsCP,QAAQ,CAAC,EAAD,CAA9C;AAAA;AAAA,MAAOQ,WAAP;AAAA,MAAoBC,cAApB;;AACA,MAAIC,IAAI,uBACLF,WADK,EACS;AAAEG,IAAAA,QAAQ,EAAE,IAAZ;AAAkBC,IAAAA,aAAa,EAAEX,MAAM,CAACY;AAAxC,GADT,CAAR;;AAIA,WAASC,MAAT,CAAgBC,GAAhB,EAAqB;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAeF,GAA3B;AACAN,IAAAA,cAAc,CAACM,GAAD,CAAd;AACD;;AACD,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEG,MAAM,CAACC,QAApB;AAAA,eACE,KAAC,QAAD;AAEE,MAAA,OAAO,EAAE,YAFX;AAQE,MAAA,UAAU,EAAE,oBAACJ,GAAD,EAAS;AACnBC,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,GAA5B;AACD,OAVH;AAYE,MAAA,cAAc,EAAE,wBAACA,GAAD,EAAS;AACvBC,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,GAA5B;AACD,OAdH;AAgBE,MAAA,WAAW,EAAE,SAhBf;AAkBE,MAAA,aAAa,EAAE,uBAACK,KAAD,EAAW;AACxBJ,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BG,KAA7B;AACD,OApBH;AA0BE,MAAA,aAAa,EAAE,IA1BjB;AA+BE,MAAA,QAAQ,EAAE,CA/BZ;AAmCE,MAAA,eAAe,EAAE,IAnCnB;AAqCE,MAAA,gBAAgB,EAAE,0BAACC,aAAD;AAAA,eAAmBA,aAAa,EAAhC;AAAA,OArCpB;AAuCE,MAAA,iBAAiB,EAAE,2BAACC,QAAD;AAAA,eAAcA,QAAQ,EAAtB;AAAA,OAvCrB;AA6CE,MAAA,oCAAoC,EAAE,IA7CxC;AA+CE,MAAA,iBAAiB,EAAE;AA/CrB,MADF,EAkDE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEJ,MAAM,CAACK,SAApB;AAAA,gBACE,KAAC,SAAD;AAAW,QAAA,IAAI,EAAC;AAAhB;AADF,MAlDF;AAAA,IADF;AAwDD,CAlED;;AAoEA,IAAML,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BN,EAAAA,QAAQ,EAAE;AACRO,IAAAA,MAAM,EAAE;AADA,GADqB;AAI/BC,EAAAA,MAAM,EAAE;AACND,IAAAA,MAAM,EAAE,GADF;AAENE,IAAAA,UAAU,EAAE;AAFN,GAJuB;AAQ/BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,UAAU,EAAE,UADH;AAETC,IAAAA,MAAM,EAAE;AAFC;AARoB,CAAlB,CAAf;AAcA,eAAexB,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { View, StyleSheet, TextInput, Pressable, Animated } from \"react-native\";\nimport colors from \"../constants/colors\";\nimport AddButton from \"../components/AddButton\";\nimport { Calendar, CalendarList, Agenda } from \"react-native-calendars\";\n\nconst IndexCal = (props) => {\n  const [selectedDay, setSelectedDay] = useState(\"\");\n  let mark = {\n    [selectedDay]: { selected: true, selectedColor: colors.accBlue },\n  };\n\n  function setDay(day) {\n    console.log(\"function: \" + day);\n    setSelectedDay(day);\n  }\n  return (\n    <View style={styles.imageBox}>\n      <Calendar\n        // Initially visible month. Default = now\n        current={\"2012-03-01\"}\n        // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\n        // minDate={\"2012-05-10\"}\n        // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\n        //maxDate={\"2012-05-30\"}\n        // Handler which gets executed on day press. Default = undefined\n        onDayPress={(day) => {\n          console.log(\"selected day\", day);\n        }}\n        // Handler which gets executed on day long press. Default = undefined\n        onDayLongPress={(day) => {\n          console.log(\"selected day\", day);\n        }}\n        // Month format in calendar title. Formatting values: http://arshaw.com/xdate/#Formatting\n        monthFormat={\"yyyy MM\"}\n        // Handler which gets executed when visible month changes in calendar. Default = undefined\n        onMonthChange={(month) => {\n          console.log(\"month changed\", month);\n        }}\n        // Hide month navigation arrows. Default = false\n        //hideArrows={true}\n        // Replace default arrows with custom ones (direction can be 'left' or 'right')\n        //renderArrow={(direction) => <Arrow />}\n        // Do not show days of other months in month page. Default = false\n        hideExtraDays={true}\n        // If hideArrows = false and hideExtraDays = false do not switch month when tapping on greyed out\n        // day from another month that is visible in calendar page. Default = false\n        //disableMonthChange={true}\n        // If firstDay=1 week starts from Monday. Note that dayNames and dayNamesShort should still start from Sunday\n        firstDay={1}\n        // Hide day names. Default = false\n        // hideDayNames={true}\n        // Show week numbers to the left. Default = false\n        showWeekNumbers={true}\n        // Handler which gets executed when press arrow icon left. It receive a callback can go back month\n        onPressArrowLeft={(subtractMonth) => subtractMonth()}\n        // Handler which gets executed when press arrow icon right. It receive a callback can go next month\n        onPressArrowRight={(addMonth) => addMonth()}\n        // Disable left arrow. Default = false\n        //disableArrowLeft={true}\n        // Disable right arrow. Default = false\n        //disableArrowRight={true}\n        // Disable all touch events for disabled days. can be override with disableTouchEvent in markedDates\n        disableAllTouchEventsForDisabledDays={true}\n        // Enable the option to swipe between months. Default = false\n        enableSwipeMonths={true}\n      />\n      <View style={styles.addButton}>\n        <AddButton icon=\"plus\" />\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  imageBox: {\n    height: \"100%\",\n  },\n  calBox: {\n    height: 600,\n    paddingTop: 75,\n  },\n  addButton: {\n    alignItems: \"flex-end\",\n    margin: 20,\n  },\n});\n\nexport default IndexCal;\n"]},"metadata":{},"sourceType":"module"}